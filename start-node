#!/bin/sh
#
# Copyright (C) 2019, Ingenium Blockchain Technologies - All Rights Reserved
#
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential
#
# -----
# File: docker-compose.yaml
# File Created: Friday, 17th June 2020 13:21:07
# Author: Avasiloae Gabriel (gabriel@modex.tech)
# -----
#
# Absolute path to this script, e.g. /home/user/bin/foo.sh
SCRIPT=$(readlink -f "$0")
# Absolute path this script is in, thus /home/user/bin
SCRIPTPATH=$(dirname "$SCRIPT")
#chmod +x auth0

#args
##to be received from template


help() {
    echo ""
    echo "#############################################################################################"
    echo "#      "
    echo "# Usage: start-node [options]  "
    echo "#      "
    echo "#  Bash script wrapper to start BCDB core instance  "
    echo "#"
    echo "#  Options:"
    echo "#         --nodeName <string>                 BCDB Node Name"
    echo "#         --newtork  <string>                 BCDB Node Netowrk (auth|data)"
    echo "#         --user <string>                     BCDB Admin User"
    echo "#         --pass <string>                     BCDB Admin Password"
    echo "#         --bind [string]                     BCDB Node External Interface IP"
    echo "#         --authNode <string>                 BCDB Authorization Node IP"
    echo "#         --seedNode <string>                 BCDB Initial Node IP"
    echo "#"
    echo "#         --clean [string]                    Clean existing node data [true|false] default: false"
    echo "#         --stop [string]                     Stop running services [true|false] default: false"
    echo "#         --registry [string]                 Docker private registry"
    echo "#         --env [string]                      Local env settings file"
    echo "#         --log.level <string>                BCDB Log Level (INFO|WARN|ERROR|DEBUG|TRACE)"
    echo "#         --help <string>                     This help"
    echo "#"
    echo "#         see the BCDB Documentation for additional instructions"
    echo "#"
    echo "############################################################################################"

    exit 0
}

for i in "$@"
do
case $i in
    --nodeName=*)
        arg_node_name="${i#*=}"
        shift # past argument=value
    ;;
    --network=*)
        arg_network="${i#*=}"
        shift # past argument=value
    ;;    
    --user=*)
        arg_user="${i#*=}"
        shift # past argument=value
    ;;    
    --pass=*)
        arg_pass="${i#*=}"
        shift # past argument=value
    ;;    
    --bind=*)
        bind_ip="${i#*=}"
        shift # past argument=value
    ;;
    --authNode=*)
        arg_auth_node_ip="${i#*=}"
        shift # past argument=value
    ;;
    --seedNode=*)
        arg_seed_node_ip="${i#*=}"
        shift # past argument=value
    ;;
    --clean=*)
        clean_home_dir="${i#*=}"
        shift # past argument=value
    ;;
    --stop=*)
        stop_services="${i#*=}"
        shift # past argument=value
    ;;
    --registry=*)
        registry_server_url="${i#*=}"
        shift # past argument=value
    ;;
    --env=*)
        env_arg="${i#*=}"
        shift # past argument=value
    ;;
    --help*)
        help
        shift # past argument=value
    ;;
    *)
        # unknown option
        #args="$args $i"
        help
    ;;
esac
done

#const 
export PORT_HTTP=:32018
export PORT_TCP=:32019
export PORT_GOSSIP=:32020
 
export PORT_P2P=:32021
export PORT_RPC=:32022

#system user
export SYSTEM_USER=system@ibt.ro
export SYSTEM_PASS=123abc

export ADMIN_USER=$arg_user
export ADMIN_PASS=$arg_pass

export NETWORK=$arg_network
export NODE_NAME=$arg_node_name #nodeid, moniker

export AUTH_IP=$arg_auth_node_ip
export SEED_IP=$arg_seed_node_ip

export LOCAL_IP=

if [ -z $LOCAL_IP ]; then
    echo "Attempt detecting external interface..."
    export LOCAL_IP=$(ip route get 8.8.8.8 | awk -v FS=" " '{for (i=0;i<=NF;i++) if ($i == "src") printf $(i+1)"\n"}')
    echo "Detected external interface ip $LOCAL_IP"
fi

if [ -z $AUTH_IP ]; then #auth-network
    export DLT_AUTH_NODE=true
else #data-netowrk
    export DLT_AUTH_NODE=false
fi

if [ -z $SEED_IP ]; then #initial node
  export PORT_HTTP=
  export PORT_TCP=
  export PORT_GOSSIP=

  export PORT_P2P=
  export PORT_RPC=

  export NODE_TYPE=initial
  if [ -z $AUTH_IP ]; then #auth-network SEED
    AUTH_IP=core
#$else #PEER
#    export AUTH_IP=$LOCAL_IP
  fi
  
else  #peer node
  export NODE_TYPE=peer
fi

envsubst < $SCRIPTPATH/node-template.yml > $SCRIPTPATH/docker-compose.yml

#docker-compose down
docker rm -f $(docker ps -aq)
docker volume ls -f "name=bcdb.*" | xargs docker volume rm -f

export AUTH_INIT=
export DATA_INIT=

if [ -z $SEED_IP ]; then #master node
   if [ $AUTH_IP = "core" ]; then # master auth node
     AUTH_INIT=authorization-network-configurator
   else #master data node
     DATA_INIT=data-network-configurator
   fi
fi

echo "[INFO] ------------------------------------------------------------------"
echo "[INFO]  Environment set used:                                            " 
echo "[INFO] ------------------------------------------------------------------"
echo "[INFO] HTTPS          = $HTTPS"
echo "[INFO]"
echo "[INFO] admin_user     = $ADMIN_USER"
echo "[INFO] password       = $ADMIN_PASS"
echo "[INFO]"
echo "[INFO] system_user    = $SYSTEM_USER"
echo "[INFO] password       = $SYSTEM_PASS"
echo "[INFO]"
echo "[INFO] network        = $NETWORK"
echo "[INFO] node type      = $NODE_TYPE"
echo "[INFO] node name      = $NODE_NAME"
echo "[INFO]"
echo "[INFO] local node     = $LOCAL_IP"
echo "[INFO] auth node      = $AUTH_IP"
echo "[INFO] seed node      = $SEED_IP"
echo "[INFO]"
echo "[INFO] auth_init?      = $AUTH_INIT"
echo "[INFO] data_init?      = $DATA_INIT"
echo "[INFO] ------------------------------------------------------------------"
echo "[INFO]"

docker-compose up core dlt mongodb rabbitmq $AUTH_INIT $DATA_INIT
